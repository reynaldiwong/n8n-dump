{"createdAt":"2025-06-19T16:21:22.261Z","updatedAt":"2025-06-23T11:09:13.000Z","id":"V0VppRng9IUB6yYj","name":"DONE - Budget Spending Tracker","active":false,"isArchived":false,"nodes":[{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[160,60],"id":"57fa00f7-0925-4018-aef1-3d8d1a1895a8","name":"When clicking ‘Test workflow’"},{"parameters":{"promptType":"define","text":"={{ $json.transactions }}","options":{"systemMessage":"You are a financial transaction categorization assistant.\n\nYour task is to process a list of transaction data in JSON format and perform the following actions for each transaction:\n\nAssign a spending category based on the transaction’s description, vendor, amount, and date.\n\nEstimate a confidence score between 0 and 1 for each category assignment.\n\nFlag transactions for manual review if the confidence score is below 0.8.\n\nIn the output, include the transaction’s id, amount, date, description, vendor, category, certainty, and flagged status.\n\nUse the following category labels:\n\nFood & Beverage\n\nTransport\n\nEntertainment\n\nUtilities\n\nIncome\n\nTransfer Out\n\nShopping\n\nOthers\n\nCategorization rules:\n\nUse known vendor names and historical patterns when possible.\n\nIf the vendor is unknown, use keywords in the description to infer the category.\n\nKeep confidence scores realistic (between 0.7–0.99).\n\nFlag any transaction with a confidence score below 0.8 by setting \"flagged\": true.\n\nInput JSON format:\n\n{\n\"transactions\": [\n{\n\"id\": \"string\",\n\"date\": \"YYYY-MM-DD\",\n\"amount\": integer,\n\"description\": \"string\",\n\"vendor\": \"string\",\n\"type\": \"debit | credit\",\n\"balance\": integer\n}\n]\n}\n\nOutput JSON format (only respond with this, no extra text):\n\n{\n\"categorized_transactions\": [\n{\n\"id\": \"string\",\n\"amount\": integer,\n\"date\": \"YYYY-MM-DD\",\n\"description\": \"string\",\n\"vendor\": \"string\",\n\"category\": \"string\",\n\"certainty\": float,\n\"flagged\": true | false\n}\n]\n}\n\nExample Input:\n\n{\n\"transactions\": [\n{\n\"id\": \"trx001\",\n\"date\": \"2025-06-19\",\n\"amount\": -500000,\n\"description\": \"GoFood - McDonald's\",\n\"vendor\": \"GoFood\",\n\"type\": \"debit\",\n\"balance\": 4500000\n},\n{\n\"id\": \"trx002\",\n\"date\": \"2025-06-19\",\n\"amount\": -1500000,\n\"description\": \"Transfer ke BCA 12345678\",\n\"vendor\": \"BCA\",\n\"type\": \"debit\",\n\"balance\": 3000000\n},\n{\n\"id\": \"trx003\",\n\"date\": \"2025-06-19\",\n\"amount\": 3000000,\n\"description\": \"Gaji Bulanan\",\n\"vendor\": \"Company XYZ\",\n\"type\": \"credit\",\n\"balance\": 6000000\n}\n]\n}\n\nExpected Output:\n\n{\n\"categorized_transactions\": [\n{\n\"id\": \"trx001\",\n\"amount\": -500000,\n\"date\": \"2025-06-19\",\n\"description\": \"GoFood - McDonald's\",\n\"vendor\": \"GoFood\",\n\"category\": \"Food & Beverage\",\n\"certainty\": 0.95,\n\"flagged\": false\n},\n{\n\"id\": \"trx002\",\n\"amount\": -1500000,\n\"date\": \"2025-06-19\",\n\"description\": \"Transfer ke BCA 12345678\",\n\"vendor\": \"BCA\",\n\"category\": \"Transfer Out\",\n\"certainty\": 0.70,\n\"flagged\": true\n},\n{\n\"id\": \"trx003\",\n\"amount\": 3000000,\n\"date\": \"2025-06-19\",\n\"description\": \"Gaji Bulanan\",\n\"vendor\": \"Company XYZ\",\n\"category\": \"Income\",\n\"certainty\": 0.97,\n\"flagged\": false\n}\n]\n}\n\nInstructions:\n\nOnly respond with the correctly formatted output JSON. No additional text, comments, or explanations."}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.9,"position":[600,-80],"id":"ee1545c3-cb98-4acc-a49e-6667d4c01882","name":"AI Agent"},{"parameters":{"jsCode":"return [\n  {\n    json: {\n      transactions: [\n        {\n          id: \"trx001\",\n          date: \"2025-06-19\",\n          amount: -500000,\n          description: \"GoFood - McDonald's\",\n          vendor: \"GoFood\",\n          type: \"debit\",\n          balance: 4500000\n        },\n        {\n          id: \"trx002\",\n          date: \"2025-06-19\",\n          amount: -1500000,\n          description: \"Transfer ke BCA 12345678\",\n          vendor: \"BCA\",\n          type: \"debit\",\n          balance: 3000000\n        },\n        {\n          id: \"trx003\",\n          date: \"2025-06-19\",\n          amount: 3000000,\n          description: \"Gaji Bulanan\",\n          vendor: \"Company XYZ\",\n          type: \"credit\",\n          balance: 6000000\n        },\n        {\n          id: \"trx004\",\n          date: \"2025-06-19\",\n          amount: -75000,\n          description: \"GrabFood - Starbucks\",\n          vendor: \"GrabFood\",\n          type: \"debit\",\n          balance: 5925000\n        },\n        {\n          id: \"trx005\",\n          date: \"2025-06-19\",\n          amount: -50000,\n          description: \"ShopeePay Top Up\",\n          vendor: \"Shopee\",\n          type: \"debit\",\n          balance: 5875000\n        },\n        {\n          id: \"trx006\",\n          date: \"2025-06-19\",\n          amount: -25000,\n          description: \"GoFood - Bakmi GM\",\n          vendor: \"GoFood\",\n          type: \"debit\",\n          balance: 5850000\n        },\n        {\n          id: \"trx007\",\n          date: \"2025-06-19\",\n          amount: -250000,\n          description: \"Netflix Subscription\",\n          vendor: \"Netflix\",\n          type: \"debit\",\n          balance: 5600000\n        },\n        {\n          id: \"trx008\",\n          date: \"2025-06-19\",\n          amount: 500000,\n          description: \"Freelance Project Payment\",\n          vendor: \"Client ABC\",\n          type: \"credit\",\n          balance: 6100000\n        },\n        {\n          id: \"trx009\",\n          date: \"2025-06-19\",\n          amount: -2000000,\n          description: \"ATM Cash Withdrawal\",\n          vendor: \"ATM Mandiri\",\n          type: \"debit\",\n          balance: 4100000\n        },\n        {\n          id: \"trx010\",\n          date: \"2025-06-19\",\n          amount: -100000,\n          description: \"Gojek - Ride to Office\",\n          vendor: \"Gojek\",\n          type: \"debit\",\n          balance: 4000000\n        }\n      ]\n    }\n  }\n];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[380,-80],"id":"783c73d7-9284-4742-906f-80bfa5bea51a","name":"Code"},{"parameters":{"model":{"__rl":true,"mode":"list","value":"gpt-4o-mini"},"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.2,"position":[620,80],"id":"e2c821be-28cf-422c-82f4-1bdab6c1d092","name":"OpenAI Chat Model","credentials":{"openAiApi":{"id":"lHwdfRlL2uaw5819","name":"OpenAi account"}}},{"parameters":{"jsCode":"const aiOutputString = $json.output;\n\ntry {\n  const result = JSON.parse(aiOutputString);\n\n  if (!result.categorized_transactions) {\n    return [{ json: { summaryText: '❌ No transactions found in result.' } }];\n  }\n\n  const txs = result.categorized_transactions;\n  let incomeCount = 0;\n  let expenseCount = 0;\n  let flaggedList = '';\n  let transactionDetails = '';\n  let totalIncome = 0;\n  let totalExpense = 0;\n\n  // Group transactions by category\n  const categoryGroups = {};\n\n  txs.forEach(t => {\n    const emoji = t.category === 'Income' ? '🟢' : '🔴';\n\n    if (t.category === 'Income') {\n      incomeCount++;\n      totalIncome += t.amount;\n    } else {\n      expenseCount++;\n      totalExpense += Math.abs(t.amount);\n    }\n\n    if (t.flagged) {\n      flaggedList += `⚠️ ${t.date}\\nAmount     : Rp ${Math.abs(t.amount).toLocaleString('id-ID')}\\nVendor     : ${t.vendor}\\nDescription: ${t.description}\\nCategory   : ${t.category}\\nCertainty  : ${(t.certainty * 100).toFixed(0)}%\\n\\n`;\n    }\n\n    // Initialize category group if not exists\n    if (!categoryGroups[t.category]) categoryGroups[t.category] = [];\n\n    categoryGroups[t.category].push({\n      emoji,\n      date: t.date,\n      amount: Math.abs(t.amount).toLocaleString('id-ID'),\n      vendor: t.vendor,\n      description: t.description,\n      category: t.category\n    });\n  });\n\n  const netBalance = totalIncome - totalExpense;\n\n  // Build Transaction Details section by sorted category\n  const sortedCategories = Object.keys(categoryGroups).sort();\n  sortedCategories.forEach(cat => {\n    transactionDetails += `📦 *${cat}*\\n`;\n    categoryGroups[cat].forEach(t => {\n      transactionDetails += `${t.emoji} Date       : ${t.date}\\n`\n        + `     Amount     : Rp ${t.amount}\\n`\n        + `     Vendor     : ${t.vendor}\\n`\n        + `     Description: ${t.description}\\n\\n`;\n    });\n  });\n\n  // Build final message\n  const message = `📊 *Daily Transaction Categorization Summary*\\n\\n`\n    + `🟢 *Income:* ${incomeCount} transaction(s) | Rp ${totalIncome.toLocaleString('id-ID')}\\n`\n    + `🔴 *Expenses:* ${expenseCount} transaction(s) | Rp ${totalExpense.toLocaleString('id-ID')}\\n\\n`\n    + (flaggedList \n      ? `🚨 *Flagged Transactions (potentially uncertain categorization — please review):*\\n${flaggedList}\\n`\n      : `✅ No flagged transactions today.\\n\\n`)\n    + `📋 *Transaction Details (sorted by category):*\\n${transactionDetails}`\n    + `💰 *Net Total Today:* Rp ${netBalance.toLocaleString('id-ID')}`;\n\n  return [{ json: { summaryText: message } }];\n\n} catch (error) {\n  return [{ json: { summaryText: '❌ Error parsing JSON output: ' + error.message } }];\n}\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1020,-80],"id":"410b7b60-5c77-4fd9-9d30-3126a20d5dab","name":"Code2"},{"parameters":{"chatId":"448658090","text":"={{ $json.summaryText }}","additionalFields":{"appendAttribution":false}},"type":"n8n-nodes-base.telegram","typeVersion":1.2,"position":[1300,-80],"id":"51ded0f7-3af0-4ffe-825f-af5525f57fff","name":"Telegram","webhookId":"f600602a-1a7c-442a-99e9-14ffd698b7b5","credentials":{"telegramApi":{"id":"mqjjEBXk8igsBbUR","name":"Jarvis Bot"}}},{"parameters":{"rule":{"interval":[{}]}},"type":"n8n-nodes-base.scheduleTrigger","typeVersion":1.2,"position":[160,-140],"id":"57f035f5-e883-4885-b052-eadf094f6651","name":"Schedule Trigger","disabled":true},{"parameters":{"content":"## Data Input & Trigger\nManual trigger untuk testing atau scheduled trigger untuk automatic processing, generate sample transaction data untuk AI categorization.","height":520,"width":420,"color":3},"type":"n8n-nodes-base.stickyNote","position":[100,-280],"typeVersion":1,"id":"5d5ec283-72bc-40bb-878d-189ee74ede5e","name":"Sticky Note"},{"parameters":{"content":"## AI Transaction Categorization\nAI financial assistant categorize transactions ke 8 kategori spending, assign confidence score, dan flag uncertain transactions untuk manual review.","height":520,"width":340,"color":6},"type":"n8n-nodes-base.stickyNote","position":[560,-280],"typeVersion":1,"id":"81ab6818-f5e9-46f7-9f5b-4733613a4aba","name":"Sticky Note1"},{"parameters":{"content":"## Summary Processing\nParse AI output, calculate income vs expense totals, group transactions by category, dan generate formatted summary dengan flagged items.","height":520,"width":260,"color":5},"type":"n8n-nodes-base.stickyNote","position":[940,-280],"typeVersion":1,"id":"facc620c-01a4-43ad-a02d-9a7d5c517931","name":"Sticky Note2"},{"parameters":{"content":"## Telegram Notification\nSend daily spending summary via Telegram dengan breakdown per kategori, flagged transactions, dan net balance calculation.","height":520,"width":260,"color":4},"type":"n8n-nodes-base.stickyNote","position":[1240,-280],"typeVersion":1,"id":"9e1eb94a-24de-4905-a4e8-e0c345a3bc2a","name":"Sticky Note3"},{"parameters":{"content":"## Key Insight: Smart Budget Intelligence System\nWorkflow ini punya AI-Powered Budget Tracking yang intelligent:\n\nSmart Categorization - AI categorize ke 8 spending categories dengan confidence scoring\n\nQuality Control - Flag uncertain transactions untuk manual review (confidence < 0.8)\n\nRich Analytics - Daily summary dengan income/expense breakdown dan net balance\n\nAutomated Reporting - Scheduled atau manual trigger dengan formatted Telegram notifications","height":380,"width":440},"type":"n8n-nodes-base.stickyNote","position":[1580,-280],"typeVersion":1,"id":"7c6035f2-1fb1-484f-9543-2bf6fc2a255a","name":"Sticky Note4"}],"connections":{"When clicking ‘Test workflow’":{"main":[[{"node":"Code","type":"main","index":0}]]},"Code":{"main":[[{"node":"AI Agent","type":"main","index":0}]]},"OpenAI Chat Model":{"ai_languageModel":[[{"node":"AI Agent","type":"ai_languageModel","index":0}]]},"AI Agent":{"main":[[{"node":"Code2","type":"main","index":0}]]},"Code2":{"main":[[{"node":"Telegram","type":"main","index":0}]]},"Schedule Trigger":{"main":[[{"node":"Code","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"e2ab342b-3f50-4a75-843e-97f12e560cb1","triggerCount":0,"tags":[]}
